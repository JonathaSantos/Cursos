## Outros Comandos

Os comandos pop, drop e apply do git stash possuem semelhanças e diferenças bem importantes, então vamos fazer um pequeno resumo de suas funcionalidades aqui:
Apply
O comando git stash apply espera um índice de um item na stash e o aplica ao repositório, porém, esse comando não remove o item da stash, ou seja, se após executar o comando git stash apply 1 você executar git stash list, o item referente ao índice 1 continuará na stash.

Pop
O git stash pop faz exatamente a mesma coisa que o git stash apply, porém, além de aplicar o item da stash, ele também o remove de lá. Esse comando, sem nenhum parâmetro extra, vai aplicar o último item adicionado à stash, mas nós também podemos informar um índice para ele, como git stash pop 1.

Drop
O git stash drop funciona exatamente como o pop, mas com uma simples diferença: ele apenas remove o item da stash, sem aplicá-lo em nosso repositório. Dessa forma, git stash drop remove o último item adicionado à stash, enquanto o git stash drop 1 remove da stash o item com índice 1.


Imaginem que nós estamos criando alguma modificação. Então, nós removeremos todas as linhas do final. Nesse ponto, temos vários arquivos modificados e alterados. Porém, nós percebemos que a implementação está incorreta ou a funcionalidade não será mais implementada. Basicamente, queremos descartar o que foi feito.

Se temos apenas um arquivo, para descartar essa modificação, podemos fazer um Ctrl + Z. Mas, se temos vários arquivos, sair fazendo Ctrl + Z em muitos lugares pode ser bastante cansativo. Para isso, podemos utilizar o git.

Descartando várias alterações
Vamos limpar o terminal e executar um git status. Temos um arquivo que foi modificado, mas poderíamos ter vários. Por exemplo, também vamos modificar algo no index.html. Algo inválido: adicionamos várias quebras de linha.

Então, nosso git status tem modificações. E o que queremos fazer é desfazer essas modificações. Nós não fizemos git add e não commitamos isso. Como não foi commitado, não é um revert, nem um reset. Não é um comando que já aprendemos no curso anterior.

O que queremos fazer é restaurar o nosso local de trabalho para um estado válido, sem essas modificações. Então, queremos fazer um git restore.

Podemos fazer o restore para algum estado específico, mas se não informarmos o estado, isso significa que a restauração será feita sem o que foi modificado. Ou seja, o último commit do nosso branch atual.

Então, queremos fazer o restore de quê? Podemos fazer de app.js e de index.html um de cada vez. Ou fazer do ponto (git restore .). Assim como já aprendemos que o git add . adiciona o projeto todo, o git restore . restaura todo o projeto também. E esse ponto não é um significado especial do git.

Na linha de comando, o ponto significa o diretório atual. Então, estamos fazendo o restore de tudo na pasta atual.

Então, esse git restore vai fazer um Ctrl + Z no nosso projeto. Assim, as linhas que adicionamos no index sumiram, e aquelas alterações no nosso app.js também sumiram. Então, com isso, se fazemos um git status, temos o nosso projeto limpo novamente.

E o git restore é um dos comandos que veio para substituir o git checkout. Então, o git checkout, como dissemos, faz muitas coisas. Uma das coisas que ele fazia é o restore. Com o git checkout -- ., temos o mesmo resultado.

Então, novamente, vamos remover as quebras de linha e salvar. Se fizermos o git checkout -- ., ele desfaz as alterações. Então, temos todas as nossas linhas adicionadas de novo.

Como falamos, esse restore restaura o projeto ou restaura arquivos específicos para algum ponto específico. Por padrão, ele faz o restore para head, ou seja, para o nosso último commit, que no nosso caso aqui é quebrando a linha do script.

Mas e se quisermos fazer o restore para ver o nosso projeto ou ver um arquivo específico antes de corrigir a indentação, ou seja, indentando os botões? Queremos ver como o arquivo era em dado commit, como o nosso projeto todo era nesse outro commit.

Então, conseguimos "viajar no tempo" também utilizando o git restore. E isso nós veremos no próximo vídeo.

Vamos supor que removemos todas as quebras de linhas extras que inserimos no arquivo. Estamos prontos para adicionar nosso app.js para fazer o commit.

Adicionamos com o comando git add app.js, então, ele está no "stage", pronto para ser comitado. Isso é o que chamamos de "stage" ou "staging area". Mas, o que acontece se quisermos desfazer isso? Não estamos prontos para comitar. Queremos fazer mais alterações ou simplesmente desistir dessa modificação.

Note que o próprio git já nos mostra que podemos fazer um restore do que está em nossa "staging area". Se fizermos git restore --staged, significa que estamos modificando algo que está dentro dessa "staging area", dentro de algo que fizemos com o git add.

Assim, com git restore --staged app.js, não desfazemos a alteração, mas retornamos ao estado anterior. Agora, é como se não tivéssemos feito o git add. Observe que ele está pronto para fazermos o git add e as linhas, ainda estão removidas.

Agora, se quisermos desfazer as alterações, fazemos o git restore app.js. Sendo assim, desfizemos as alterações. Repare a diferença entre o --staged e o staged.

Um outro parâmetro que podemos passar para o restore é, suponha que queremos mover nosso index.html para o estado que estava quando fizemos o Merge branch 'nova-funcionalidade' into main.

O que podemos fazer? Podemos copiar o hash do commit, fazer o git restore --source = e colá-lo em seguida. Queremos restaurar para esse estado nosso index.html. O comando inteiro ficará parecido com o seguinte:

git restore --source = 5081a55bc92af2917c8519f16a7412b86ba3b1c2 index.html
Copiar código
Quando fazemos isso, ele pega o index e o coloca no estado que estava nesse commit.

Ao acessar o index, observe que tem algumas alterações: O nosso script está em uma linha só, a nossa tag de link não está indentada e os botões também não estão indentados. Ele retornou para esse estado. Se fizermos um git status, podemos modificar o arquivo a partir daquele estado e adicionar um novo commit, se quisermos.

Mas, se quisermos apenas visualizar o arquivo e entender como ele estava naquele estado, podemos desfazer esse trabalho, ou seja, restaurar para o estado normal dele com o git restore index.html, que é equivalente a fazer --source = head.

Fazer o restore sem esse --source é equivalente a fazer --source = head, que corresponde ao último commit que temos no branch atual.

Agora, se fizermos o git status, temos nossa branch movendo-detalhes correta. Se fizermos um git log, nossa branch movendo-detalhes está no mesmo lugar que a branch main.

Vamos voltar para a nossa branch com git switch main e vamos remover com git branch -d movendo-detalhes, que foi um branch que criamos apenas para simular a criação de uma nova funcionalidade, mas não chegamos a comitar nada lá.

Nesse vídeo, aprendemos a manipular nossa "working tree", que é o que estiver em nosso projeto, mesmo que não tenhamos adicionado para commit.

Quando temos algo indicado com modified, isso está na nossa "working tree", o nosso projeto, basicamente. Manipulamos também nossa staging area, que é o que está verde quando fazemos o git status, o que modificamos quando fazemos nosso git add.

Aprendemos a manipular esses dois status com o git restore, seja removendo algo da nossa staging area com o git restore staged ou removendo algo da nossa working tree com o git restore sem o staged. Assim, aprendemos a manipular nosso código, a working tree e a staging area.

Suponha que esse projeto, no estado que está, está aceitável. Queremos apontar que temos uma nova versão (a 0.1.0). Como podemos gerenciar versões ou marcar um checkpoint, um ponto onde queremos salvar e dar um nome para esse estado? Vamos falar sobre isso, sobre criar versões e gerar releases na próxima aula.

